# -*- coding: utf-8 -*-
"""
Created on Fri Nov 26 12:30:10 2021

@author: Ding,Li
"""
'''
This is the demo for our work on PA4, with a setting of the following variables:
    data_load_path: Input path of the 2021_pa_3-5_student_data folder, please end with"\"
    file_dict: corresponding data set such as A~F or G~K
    data_status: for A~F 'Debug'; for G~K:'Unknown'
    result_save_path: path to save corresponding output
    N_point: amount of samples in each frame(16 for this PA)
    
Output:
    For the debugging dataset, you can get the corresponding output file and a comparison between our
    and standard dataset.
    For the unknown dataset, you can get the output file.
    
And another thing to notice is that for dataset A the setting of frame in step_1_rigid_registration
should be set to 75, others are 200.
'''
import PA3_functions as PA3F
import PA3_solution as PA3S
import numpy as np

data_load_path='..\2021 PA 3-5 Student Data\'
#file_dict=['A']
#file_dict=['B','C','D','E','F']
file_dict = ['G','H','J','K']
#data_status='Debug'
data_status='Unknown'
result_save_path='..\Output\'
'''
For the first step registration, and the details about findclosestpoint function, please refer to our PA3 in:
    https://github.com/Ding515/JHU-CIS1-PA3
'''
vertices, triangles=PA3F.body_surface_loader(data_load_path+'Problem4MeshFile.sur')
N_A_marker=np.loadtxt(data_load_path+'Problem4-BodyA.txt',skiprows=1).shape[0]-1
N_B_marker=np.loadtxt(data_load_path+'Problem4-BodyB.txt',skiprows=1).shape[0]-1
N_point=16

for file_name in file_dict:
    samples=np.loadtxt(data_load_path+'PA4-'+file_name+'-'+data_status+'-SampleReadingsTest.txt',skiprows=1,delimiter=',')
    A_marker=np.loadtxt(data_load_path+'Problem4-BodyA.txt',skiprows=1)
    B_marker=np.loadtxt(data_load_path+'Problem4-BodyB.txt',skiprows=1)
    tip_save_path=result_save_path+file_name+'_tip_coordinate.npy'
    tip_positions=PA3S.step_1_rigid_registration(samples, A_marker,B_marker, N_frames= 200, tip_save_path=tip_save_path)
    F_init = np.hstack((np.identity(3),np.zeros((3,1))))
'''
ICP is the iterated closest point algorithm we construct.
Input: 
    tip_positions:A tip positions in Nx3 array
    vertices: vertices coordinates generated by PA3F.body_surface_loader function
    triangles: vertices from PA3F.body_surface_loader function, the triangle vertices indices
    F_init: 4x3 array where the first 3 cols corresponding to R and the last col is position
    max_iteration: maximal iteration for ICP
    termination_threshold: the threshold to dertermin if early stopping
    termination_iteration:continues iteration, if met the iteration is early stopped
    gamma:params to check if early stooping
    
Output:
    frame: learned frame
    mean_ICP_distance: distance between the transformed point and its closest point
    ICP_tansformed: transformed point set
    ICP_nearest_point: corresponding closest point set
    error_matrix: mean error for each iteration
'''
    frame, mean_ICP_distance,ICP_tansformed,ICP_nearest_point,error_matrix=PA3F.ICP(tip_positions, vertices, triangles, F_init, max_iteration=30, termination_threshold = 1e-1, termination_iteration = 10, gamma=0.95)
    ICP_frame_save_path = result_save_path + file_name + '_frame.npy'
    np.save(ICP_frame_save_path,frame)
'''
The following part is to compute the bias for debugging data set and generate output for both types of dataset.
'''    
    if data_status == 'Debug':
        answer_read_path = data_load_path+'PA4-'+file_name+'-Debug-Answer.txt'
        error_transformed_mean,error_ICP_mean=PA3F.PA4_result_comparison(answer_read_path, ICP_tansformed,ICP_nearest_point)
        save_path_output = result_save_path+'PA4-'+file_name+'-Debug-Output.txt'
        title =str(ICP_tansformed.shape[0]) +' PA4-'+file_name+'-Debug-Output.txt'
        distance = PA3S.output_generate(ICP_tansformed,ICP_nearest_point,save_path_output,title)
        print('current case:',file_name)
        print('original error:',error_transformed_mean)
        print('ICP error:',error_ICP_mean)
        
    if data_status == 'Unknown':
        save_path_output = result_save_path+'PA4-'+file_name+'-Unknown-Output.txt'
        title =str(ICP_tansformed.shape[0]) +' PA4-'+file_name+'-Unknown-Output.txt'
        distance = PA3S.output_generate(ICP_tansformed,ICP_nearest_point,save_path_output,title)